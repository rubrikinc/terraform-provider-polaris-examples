# Point Terraform to the Polaris provider.
terraform {
  required_providers {
    polaris = {
      source  = "rubrikinc/polaris"
      version = "~>0.3.0"
    }
  }
}

variable "polaris_credentials" {
  type        = string
  description = "Account name or path to Polaris service account file."
}

variable "principal_id" {
  type        = string
  description = "Azure object id of the service principal."
}

variable "azure_credentials" {
  type        = string
  description = "Path to the Azure service principal file."
}

variable "subscription_id" {
  type        = string
  description = "Azure subscription id."
}

variable "subscription_name" {
  type        = string
  description = "Azure subscription name."
}

variable "tenant_domain" {
  type        = string
  description = "Azure tenant domain."
}

# Initalize the Azure RM provider from the shell environment.
provider "azurerm" {
  features {}
}

# The subscription the Azure RM is running with.
data "azurerm_subscription" "default" {
}

# Point the Polaris provider to the Polaris service account to use.
provider "polaris" {
  credentials = var.polaris_credentials
}

# Azure permissions required for Cloud Native Protection.
data "polaris_azure_permissions" "default" {
  features = [
    "cloud-native-protection",
  ]
}

# Create a role in Azure called terraform which has the required permissions.
resource "azurerm_role_definition" "default" {
  name  = "terraform"
  scope = data.azurerm_subscription.default.id

  permissions {
    actions          = data.polaris_azure_permissions.default.actions
    data_actions     = data.polaris_azure_permissions.default.data_actions
    not_actions      = data.polaris_azure_permissions.default.not_actions
    not_data_actions = data.polaris_azure_permissions.default.not_data_actions
  }
}

# Assign the role to the service principal used by Polaris. Note that the
# principal_id is the object id of the service principal.
resource "azurerm_role_assignment" "default" {
  principal_id       = var.principal_id
  role_definition_id = azurerm_role_definition.default.role_definition_resource_id
  scope              = data.azurerm_subscription.default.id
}

# Add the Azure service principal to Polaris. When the permission hash changes
# a diff will be generated by Terraform.
resource "polaris_azure_service_principal" "default" {
  credentials      = var.azure_credentials
  tenant_domain    = var.tenant_domain
  permissions_hash = data.polaris_azure_permissions.default.hash

  # This resource must expliclty depend on the role definition and the role
  # assignment so that the role is updated before Polaris is notified.
  depends_on = [
    azurerm_role_definition.default,
    azurerm_role_assignment.default,
  ]
}

# Add the Azure subscription to Polaris.
resource "polaris_azure_subscription" "default" {
  subscription_id   = var.subscription_id
  subscription_name = var.subscription_name
  tenant_domain     = var.tenant_domain

  cloud_native_protection {
    regions = [
      "eastus2",
    ]
  }

  depends_on = [
    polaris_azure_service_principal.default
  ]
}
